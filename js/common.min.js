// jshint esnext:true
window.onload = function () {

    var
        body = $("body"),
        hidden = "hidden",
        active = "active",
        userAgent = window.navigator.userAgent;


    ///// COUNTER
    function animationCounter() {
        var FONT = {
            '0': 0b011010011001100110010110,
            '1': 0b001001100010001000100111,
            '2': 0b011010010001001001001111,
            '3': 0b111100010010000110010110,
            '4': 0b001001101010111100100010,
            '5': 0b111110001110000110010110,
            '6': 0b011010001110100110010110,
            '7': 0b111100010010010001000100,
            '8': 0b011010010110100110010110,
            '9': 0b011010011001011100010110
        };
        var cnvs = document.querySelector('canvas');
        // cnvs.width = 150;
        // cnvs.height = 34;
        cnvs.ctx = cnvs.getContext('2d');

        var counter = 0;

        loop();

        function loop() {

            var d = 5,
                r = d / 2,
                inc = d * 0.8;


            cnvs.ctx.fillStyle = '#000000';
            cnvs.ctx.fillRect(0, 0, cnvs.width, cnvs.height);
            var idx, rx, x, y, shift, mask, bit;


            if (!String.prototype.padStart) {
                String.prototype.padStart = function padStart(targetLength, padString) {
                    targetLength = targetLength >> 0; //truncate if number, or convert non-number to 0;
                    padString = String(typeof padString !== 'undefined' ? padString : ' ');
                    if (this.length >= targetLength) {
                        return String(this);
                    } else {
                        targetLength = targetLength - this.length;
                        if (targetLength > padString.length) {
                            padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
                        }
                        return padString.slice(0, targetLength) + String(this);
                    }
                };
            }


            var cs = String(counter).padStart(7, '1256090');

            for (var i in cs) {
                shift = i * d * 4;
                x = 0;
                y = inc;
                bit = 24;
                if (mask = FONT[cs.charAt(i)]) {
                    while (--bit >= 0) {
                        idx = 23 - bit;
                        if ((idx % 4 === 0) && idx) {
                            x = 0;
                            y += inc;
                        }
                        rx = shift + (x += inc);

                        if (!rx || !r) {
                            continue;
                        }

                        var gDot = cnvs.ctx.createRadialGradient(
                            rx + r, y + r, r * 0.45, rx + r, y + r, d * 0.58
                        );

                        gDot.addColorStop(0, (mask & (1 << bit)) ? '#FFB100' : '#000000');

                        try {
                            gDot.addColorStop(1, '#0000');
                        } catch (error) {

                        }
                        cnvs.ctx.fillStyle = gDot;
                        cnvs.ctx.fillRect(rx - r, y - r, d + r, d + r);
                    }
                }
            }
            counter++;
        }

        setInterval(loop, 400);
    }

    animationCounter();


    /////////// ANIMATION

    var results = {
        machine1: document.querySelector('#machine1Result'),
        machine2: document.querySelector('#machine2Result'),
        machine3: document.querySelector('#machine3Result')
    };
    var el1 = document.querySelector('#machine1');
    var el2 = document.querySelector('#machine2');
    var el3 = document.querySelector('#machine3');


    var finishedNumber = 2;


    var machine1 = new SlotMachine(el1, {
        active: 1,
        spins: 4,
        direction: "down",
        delay: 500,

        randomize() {
            return finishedNumber;
        }
    });
    var machine2 = new SlotMachine(el2, {
        active: 4,
        spins: 4,
        delay: 500,
        direction: "down",
        randomize() {
            return finishedNumber;
        }
    });

    var machine3 = new SlotMachine(el3, {
        active: 3,
        spins: 4,
        delay: 500,
        direction: "down",
        randomize() {
            return finishedNumber;
        }
    });

    var btnStart = $(".js-start");


    btnStart.one("click", function () {


        var mainPhrase = $(".js-mainPhrase"),
            btn_bonus = $(".btn_bonus"),

            timeStep1 = 4000,
            timeStep2 = timeStep1 + 1000,
            timeStep2_1 = timeStep2 - 1000,
            timeStep3 = timeStep2 + 4000;


        function stepOne() {
            machine1.shuffle(5);
            machine2.shuffle(6);
            machine3.shuffle(8);

            setTimeout(function () {
                btn_bonus.eq(0).addClass(active);
                mainPhrase.addClass(hidden);
                mainPhrase.eq(1).removeClass(hidden);

            }, timeStep1);
        }

        stepOne();

        function stepTwo() {

            setTimeout(function () {

                finishedNumber = 0;

                machine1.shuffle(5);
                machine2.shuffle(6);
                machine3.shuffle(8);

                setTimeout(function () {
                    btn_bonus.eq(1).addClass(active);
                    mainPhrase.addClass(hidden);
                    mainPhrase.eq(2).removeClass(hidden);
                }, timeStep2_1);

            }, timeStep2);

        }

        stepTwo();

        function stepThree() {

            setTimeout(function () {

                $(".coverLayer").removeClass(hidden).addClass("coverLayer_animation"); /// 200ms
                $(".bl_popup").removeClass(hidden); /// 500ms + d200ms
                $(".js-input-email").focus();
            }, timeStep3);
        }

        stepThree();

        ///////////////////////
    });





//     var mql = window.matchMedia("(orientation: portrait)");
//
// // If there are matches, we're in portrait
//     if(mql.matches) {
//         // Portrait orientation
//         alert('Portrait');
//
//     } else {
//         // Landscape orientation
//         alert('Landscape');
//     }
//
// // Add a media query change listener
//     mql.addListener(function(m) {
//         if(m.matches) {
//             // Changed to portrait
//             alert('Portrait');
//         }
//         else {
//             // Changed to landscape
//             alert('Landscape');
//         }
//     });


    //// http://www.williammalone.com/articles/html5-javascript-ios-orientation/

/*
    var stop_mobile_scroll = true;

    function noScroll() {
        $(".no-scroll").on('touchmove', function (e) {

            alert("stop_mobile_scroll = " + stop_mobile_scroll);
            if (stop_mobile_scroll) {
                e.preventDefault();
            }
        });
    }


    var mql = window.matchMedia("(orientation: portrait)");


    if (mql.matches) {
        noScroll();
    }

    window.onorientationchange = readDeviceOrientation;

    function readDeviceOrientation() {

        if (Math.abs(window.screen.orientation) === 90) {
            // alert('Landscape');
           stop_mobile_scroll = false;
            noScroll();
        } else {
            // alert('Portrait');
            noScroll();
        }
    }

 */




};
